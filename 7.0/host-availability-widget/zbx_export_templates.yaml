zabbix_export:
  version: '7.0'
  template_groups:
    - uuid: 57b7ae836ca64446ba2c296389c009b7
      name: Templates/Modules
  templates:
    - uuid: 06f5beff8644415e878816d05aec7309
      template: 'Host availability widget Zabbix API'
      name: 'Host availability widget Zabbix API'
      groups:
        - name: Templates/Modules
      items:
        - uuid: a1fbf59be79a40408aa6a1bb6c1b783d
          name: ActiveUnavailable
          type: DEPENDENT
          key: ActiveUnavailable
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.activeUnavailable2
          master_item:
            key: fetch
        - uuid: 4aa30adc006747aeb326a8ff13547163
          name: ActiveUnknown
          type: DEPENDENT
          key: ActiveUnknown
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.activeUnknown0
          master_item:
            key: fetch
        - uuid: e89834411fdd4ad49ec48d598478960c
          name: disabledHosts
          type: DEPENDENT
          key: disabledHosts
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.disabledHosts
          master_item:
            key: fetch
        - uuid: f74b63fe2c8e45c288136f549f0ce199
          name: disabledItems
          type: DEPENDENT
          key: disabledItems
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.disabledItems
            - type: JSONPATH
              parameters:
                - '$.[0:{$RECORDS}]'
          master_item:
            key: fetch
        - uuid: 5eaf509a12b44f09945e2c635e9b34db
          name: disabledItemsCount
          type: DEPENDENT
          key: disabledItemsCount
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.disabledItemsCount
          master_item:
            key: fetch
        - uuid: 095a58321fb14339857547f319b5d8b9
          name: disabledItemsWithHost
          type: DEPENDENT
          key: disabledItemsWithHost
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.disabledItemsWithHost
          master_item:
            key: fetch
        - uuid: c3656befc76a482aabf2cf5af407a233
          name: disabledItemsWithHostHTML
          type: DEPENDENT
          key: disabledItemsWithHostHTML
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'{$CSS:table}\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: disabledItemsWithHost
        - uuid: 5702e585ab8f4d31b1fe0f7c8cb833c0
          name: Fetch
          type: SCRIPT
          key: fetch
          delay: '{$UPD}'
          value_type: LOG
          trends: '0'
          params: |
            // gather interface, host status
            
            function calculateBadPercent(data) {
                var counts = {};
                var badCounts = {};
            
                // Count total and bad occurrences for each key_
                for (var i = 0; i < data.length; i++) {
                    var key = data[i]["key_"];
                    var state = data[i]["state"];
            
                    if (!counts[key]) {
                        counts[key] = 0;
                        badCounts[key] = 0;
                    }
            
                    counts[key]++;
                    if (state === "1") {
                        badCounts[key]++;
                    }
                }
            
                // Calculate bad percentage and count for each key_
                var result = [];
                for (var k in counts) {
                    var total = counts[k];
                    var bad = badCounts[k];
                    var percent = (bad / total) * 100;
                    result.push({
                        "key_": k,
                        "bad": percent.toFixed(2),
                        "count": total
                    });
                }
            
                // Sort descending by bad percentage
                result.sort(function (a, b) {
                    return parseFloat(b.count) - parseFloat(a.count);
                });
            
                return result;
            }
            
            var scriptStarts = Date.now() / 1000;
            Zabbix.Log(3, "Zabbix API, stats started: " + toString(scriptStarts));
            
            
            var params = JSON.parse(value);
            // token = '{$Z_API_SESSIONID}';
            // url = '{$ZABBIX.URL}' + '/api_jsonrpc.php';
            token = params.token;
            url = params.url + '/api_jsonrpc.php';
            
            var req = new HttpRequest();
            req.addHeader('Content-Type: application/json');
            req.addHeader('Authorization: Bearer ' + token);
            
            // zabbix agent active (type:7) item list from a real host object
            Zabbix.Log(params.loglevel, "Zabbix API, fetch item.get");
            var ItemList = JSON.parse(req.post(url,
                '{"jsonrpc":"2.0","method":"item.get","params":{"output":["name","hostid","state","status","error","type","flags","key_"]},"id":1}'
            )).result;
            // ,"monitored":1
            
            
            Zabbix.Log(params.loglevel, "Zabbix API, fetch discoveryrule.get");
            var LLDList = JSON.parse(req.post(url,
                '{"jsonrpc":"2.0","method":"discoveryrule.get","params":{"output":["name","hostid","state","status","error","type"],"monitored":1},"id":1}'
            )).result;
            
            // get list of interfaces
            Zabbix.Log(params.loglevel, "Zabbix API, fetch hostinterface.get");
            var interfaceList = JSON.parse(req.post(url,
                '{"jsonrpc":"2.0","method":"hostinterface.get","params":{"output":["errors_from","disable_until","dns","main","error","available","useip","hostid","type","port","ip"]},"id": 1}'
            )).result;
            
            // get list of hosts
            Zabbix.Log(params.loglevel, "Zabbix API, fetch host.get");
            var hostList = JSON.parse(req.post(url,
                '{"jsonrpc":"2.0","method":"host.get","params":{"output":["host","name","hostid","status","proxyid","active_available"]},"id": 1}'
            )).result;
            
            // get list of triggers
            Zabbix.Log(params.loglevel, "Zabbix API, fetch trigger.get");
            var triggerList = JSON.parse(req.post(url,
                '{"jsonrpc":"2.0","method":"trigger.get","params":{"output":["triggerid","description","status","error","hosts"],"selectHosts":["name"]},"id":1}'
            )).result;
            
            // get list of proxies
            Zabbix.Log(params.loglevel, "Zabbix API, fetch proxy.get");
            var proxyList = JSON.parse(req.post(url,
                '{"jsonrpc":"2.0","method":"proxy.get","params":{"output":["name","proxyid"]},"id": 1}'
            )).result;
            
            // API fetching completed
            var calculationStarts = Date.now() / 1000;
            
            // build a map for fast hostid lookup
            Zabbix.Log(params.loglevel, "Zabbix API, build a map for fast hostid lookup");
            var hostMap = {};
            for (var h in hostList) {
                var host = hostList[h];
                hostMap[host.hostid] = host;  // map hostid to the entire host object
            }
            
            // build a map for fast proxyid lookup
            Zabbix.Log(params.loglevel, "Zabbix API, build a map for fast proxyid lookup");
            var proxyMap = {};
            for (var p in proxyList) {
                var proxy = proxyList[p];
                proxyMap[proxy.proxyid] = proxy;  // map proxyid to the entire host object
            }
            
            
            // triggers with errors
            Zabbix.Log(params.loglevel, "Zabbix API, amount of corrupted triggers per host");
            var triggersWithErrors = [];
            for (t in triggerList) {
                // there is an error, and trigger is not disabled
                if (triggerList[t].error !== '' && parseInt(triggerList[t].status) === 0) {
                    var row = triggerList[t];
                    row["name"] = triggerList[t].hosts[0].name;
                    row["hostid"] = triggerList[t].hosts[0].hostid;
                    delete triggerList[t].hosts;
                    delete triggerList[t].status;
                    delete triggerList[t].triggerid;
                    triggersWithErrors.push(row);
                }
            }
            // corrupted triggers by count
            var countsT = {}; var triggersWithErrorsCount = []; var i;
            // Count occurrences by hostid+name combination
            for (i = 0; i < triggersWithErrors.length; i++) {
                var hostid = triggersWithErrors[i].hostid;
                var name = triggersWithErrors[i].name;
                var key = hostid + "|" + name;
                if (countsT[key]) { countsT[key].count += 1; } else { countsT[key] = { hostid: hostid, name: name, count: 1 }; }
            }
            // Convert to triggersWithErrorsCount array
            for (var key in countsT) {
                var entry = countsT[key];
                triggersWithErrorsCount.push({ hostid: entry.hostid, name: entry.name, count: String(entry.count) });
            }
            var triggersWithErrorsWithHost = [];
            for (u in triggersWithErrorsCount) {
                var row = {};
                row["host"] = triggersWithErrorsCount[u].name;
                row["sort"] = triggersWithErrorsCount[u].count;
                row["count"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=trigger.list&context=host&filter_hostids[]=' + triggersWithErrorsCount[u].hostid + '&filter_name=&filter_state=1&filter_value=-1&filter_evaltype=0&filter_tags[0][tag]=&filter_tags[0][operator]=0&filter_tags[0][value]=&filter_inherited=-1&filter_discovered=-1&filter_dependent=-1&filter_set=1\' target=\'_blank\'>' + triggersWithErrorsCount[u].count + '</a>';
                triggersWithErrorsWithHost.push(row);
            }
            // Sort by count descending
            triggersWithErrorsWithHost.sort(function (a, b) { return Number(b.sort) - Number(a.sort); });
            // delete "sort" column
            for (var i = 0; i < triggersWithErrorsWithHost.length; i++) { delete triggersWithErrorsWithHost[i].sort; }
            
            
            
            // extract disabled hosts
            var disabledHosts = [];
            for (d in hostList) {
                if (parseInt(hostList[d].status) === 1) {
                    var host = hostList[d];
                    var proxy = proxyMap[host.proxyid];
                    var row = {};
                    if (proxy) { row["proxy"] = proxy.name; } else { row["proxy"] = ''; }
                    row["host"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=host.edit&hostid=' + hostList[d].hostid + '\' target=\'_blank\'>' + hostList[d].name + '</a>';
                    disabledHosts.push(row);
                }
            }
            
            
            
            Zabbix.Log(params.loglevel, "Zabbix API, prepare unsup, disabled, active utens");
            var activeItemList = [];
            var disabledItems = [];
            var itemsAreRunning = [];
            var unsupportedItems = [];
            var ratioItemKeyWorking = [];
            var hostName = '';
            var hostStatus = 9;
            for (i in ItemList) {
                // locate host origin the item belongs
                var item = ItemList[i];
                var host = hostMap[item.hostid];
            
                if (host) {
                    var hostName = host.name;
                    var hostStatus = host.status;
            
            
                    // if host is enabled and host is not a template
                    if (parseInt(hostStatus) === 0) {
            
                        // active ZBX item list
                        if (parseInt(ItemList[i].type) === 7) {
                            var row = {};
                            row["hostid"] = ItemList[i].hostid;
                            row["itemid"] = ItemList[i].itemid;
                            activeItemList.push(row);
                        }
            
                        // disabled items on the top of enabled host
                        if (parseInt(ItemList[i].status) === 1) {
                            var row = {};
                            row["hostid"] = ItemList[i].hostid;
                            row["itemid"] = ItemList[i].itemid;
                            row["name"] = hostName;
                            disabledItems.push(row);
                        }
            
                        // items which are running (activated, not disabled) and item is not a prototype
                        if (parseInt(ItemList[i].status) === 0 && (parseInt(ItemList[i].flags) === 0 || parseInt(ItemList[i].flags) === 4)) {
                            var row = {};
                            row["hostid"] = ItemList[i].hostid;
                            row["itemid"] = ItemList[i].itemid;
                            row["name"] = hostName;
                            itemsAreRunning.push(row);
            
                            // statistics about a item keys
                            var row = {};
                            row["key_"] = ItemList[i].key_;
                            row["state"] = ItemList[i].state;
                            row["name"] = hostName;
                            ratioItemKeyWorking.push(row);
            
            
                        }
            
                        // unsupported and enabled items
                        if (parseInt(ItemList[i].state) === 1 && ItemList[i].error !== '' && parseInt(ItemList[i].status) === 0) {
                            var row = {};
                            row["name"] = ItemList[i].name;
                            row["itemid"] = ItemList[i].itemid;
                            row["error"] = ItemList[i].error;
                            row["hostid"] = ItemList[i].hostid;
                            row["host"] = hostName;
                            unsupportedItems.push(row);
                        }
                    }
                }
            }
            
            Zabbix.Log(params.loglevel, "Zabbix API, prepare ended");
            
            
            // unique hostid's with active checks
            var uniqueHostIds = {};
            var onlyActiveHostList = [];
            var i;
            for (i = 0; i < activeItemList.length; i++) {
                var hostid = activeItemList[i].hostid;
                if (!uniqueHostIds[hostid]) {
                    uniqueHostIds[hostid] = true;
                    onlyActiveHostList.push(hostid);
                }
            }
            
            
            Zabbix.Log(params.loglevel, "Zabbix API, unsupported LLDs");
            unsupportedLLDs = [];
            for (l in LLDList) {
                if (parseInt(LLDList[l].state) === 1 && LLDList[l].error !== '') {
                    var row = {};
                    row["name"] = LLDList[l].name;
                    row["error"] = LLDList[l].error;
                    row["hostid"] = LLDList[l].hostid;
                    // locate human readable host name
                    var item = LLDList[l];
                    var host = hostMap[item.hostid];
                    if (host) {
                        row["host"] = host.name;
                    }
                    unsupportedLLDs.push(row);
                }
            }
            
            
            // Unsupported items by counts
            Zabbix.Log(params.loglevel, "Zabbix API, Unsupported items by counts");
            var countsU = {}; var unsupportedItemsCount = []; var i;
            // Count occurrences
            for (i = 0; i < unsupportedItems.length; i++) { var id = unsupportedItems[i].hostid; if (countsU[id]) { countsU[id]++ } else { countsU[id] = 1 } }
            // Convert to desired output format
            for (var id in countsU) { unsupportedItemsCount.push({ "hostid": id, "count": String(countsU[id]) }); }
            // add host origin to unsupported items
            var unsupportedItemsWithHost = [];
            for (u in unsupportedItemsCount) {
            
                var item = unsupportedItemsCount[u];
                var host = hostMap[item.hostid];
                if (host) {
                    var row = {};
                    row["host"] = host.name;
                    row["sort"] = unsupportedItemsCount[u].count;
                    row["count"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=item.list&context=host&filter_hostids[]=' + host.hostid + '&filter_name=&filter_key=&filter_type=-1&filter_value_type=-1&filter_history=&filter_trends=&filter_delay=&filter_evaltype=0&filter_tags[0][tag]=&filter_tags[0][operator]=0&filter_tags[0][value]=&filter_state=1&filter_with_triggers=-1&filter_inherited=-1&filter_discovered=-1&filter_set=1\' target=\'_blank\'>' + unsupportedItemsCount[u].count + '</a>';
                    unsupportedItemsWithHost.push(row);
                }
            
            }
            // sort by column "sort" with biggest numbers on top
            unsupportedItemsWithHost.sort(function (a, b) { return Number(b.sort) - Number(a.sort); });
            // delete "sort" column
            for (var i = 0; i < unsupportedItemsWithHost.length; i++) { delete unsupportedItemsWithHost[i].sort; }
            
            
            
            // All items by counts
            Zabbix.Log(params.loglevel, "Zabbix API, All items by counts");
            var countsA = {}; var allItemsCount = []; var i;
            // Count occurrences
            for (i = 0; i < itemsAreRunning.length; i++) { var id = itemsAreRunning[i].hostid; if (countsA[id]) { countsA[id]++ } else { countsA[id] = 1 } }
            // Convert to desired output format
            for (var id in countsA) { allItemsCount.push({ "hostid": id, "count": String(countsA[id]) }); }
            // add host origin to all items
            var itemsAreRunningWithHost = [];
            for (u in allItemsCount) {
            
                var item = allItemsCount[u];
                var host = hostMap[item.hostid];
                if (host) {
                    var row = {};
                    row["host"] = host.name;
                    row["sort"] = allItemsCount[u].count;
                    row["count"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=item.list&context=host&filter_hostids[]=' + host.hostid + '&filter_name=&filter_key=&filter_type=-1&filter_value_type=-1&filter_history=&filter_trends=&filter_delay=&filter_evaltype=0&filter_tags[0][tag]=&filter_tags[0][operator]=0&filter_tags[0][value]=&filter_state=-1&filter_status=0&filter_with_triggers=-1&filter_inherited=-1&filter_discovered=-1&filter_set=1\' target=\'_blank\'>' + allItemsCount[u].count + '</a>';
                    itemsAreRunningWithHost.push(row);
                }
            }
            // sort by column "sort" with biggest numbers on top
            itemsAreRunningWithHost.sort(function (a, b) { return Number(b.sort) - Number(a.sort); });
            // delete "sort" column
            for (var i = 0; i < itemsAreRunningWithHost.length; i++) { delete itemsAreRunningWithHost[i].sort; }
            
            
            // Disabled items by counts
            Zabbix.Log(params.loglevel, "Zabbix API, Disabled items by counts");
            var countsD = {}; var disabledItemsCount = []; var i;
            // Count occurrences by hostid+name combination
            for (i = 0; i < disabledItems.length; i++) {
                var hostid = disabledItems[i].hostid;
                var name = disabledItems[i].name;
                var key = hostid + "|" + name;
                if (countsD[key]) { countsD[key].count += 1; } else { countsD[key] = { hostid: hostid, name: name, count: 1 }; }
            }
            // Convert to disabledItemsCount array
            for (var key in countsD) {
                var entry = countsD[key];
                disabledItemsCount.push({ hostid: entry.hostid, name: entry.name, count: String(entry.count) });
            }
            var disabledItemsWithHost = [];
            for (u in disabledItemsCount) {
                var row = {};
                row["host"] = disabledItemsCount[u].name;
                row["sort"] = disabledItemsCount[u].count;
                row["count"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=item.list&context=host&filter_hostids[]=' + disabledItemsCount[u].hostid + '&filter_name=&filter_key=&filter_type=-1&filter_value_type=-1&filter_history=&filter_trends=&filter_delay=&filter_evaltype=0&filter_tags[1][tag]=&filter_tags[1][operator]=0&filter_tags[1][value]=&filter_state=-1&filter_status=1&filter_with_triggers=-1&filter_inherited=-1&filter_discovered=-1&filter_set=1\' target=\'_blank\'>' + disabledItemsCount[u].count + '</a>';
                disabledItemsWithHost.push(row);
            }
            // Sort by count descending
            disabledItemsWithHost.sort(function (a, b) { return Number(b.sort) - Number(a.sort); });
            // delete "sort" column
            for (var i = 0; i < disabledItemsWithHost.length; i++) { delete disabledItemsWithHost[i].sort; }
            
            
            // unsupported LLDs by count
            var counts = {}; var unsupportedLLDsCount = []; var i;
            // Count occurrences
            for (i = 0; i < unsupportedLLDs.length; i++) { var id = unsupportedLLDs[i].hostid; if (counts[id]) { counts[id]++; } else { counts[id] = 1; } }
            // Convert to desired output format
            for (var id in counts) { unsupportedLLDsCount.push({ "hostid": id, "count": String(counts[id]) }); }
            // add host origin to unsupported items
            var unsupportedLLDsWithHost = [];
            for (u in unsupportedLLDsCount) {
                var item = unsupportedLLDsCount[u];
                var host = hostMap[item.hostid];
                if (host) {
                    var row = {};
                    row["host"] = host.name;
                    row["sort"] = unsupportedLLDsCount[u].count;
                    row["count"] = '<a href=\'{$ZABBIX.URL}/host_discovery.php?context=host&filter_hostids[]=' + host.hostid + '&filter_name=&filter_key=&filter_type=-1&filter_delay=&filter_lifetime_type=-1&filter_enabled_lifetime_type=-1&filter_snmp_oid=&filter_state=1&filter_set=1\' target=\'_blank\'>' + unsupportedLLDsCount[u].count + '</a>';
                    unsupportedLLDsWithHost.push(row);
                }
            }
            // sort by column "sort" with biggest numbers on top
            unsupportedLLDsWithHost.sort(function (a, b) { return Number(b.sort) - Number(a.sort); });
            // delete "sort" column
            for (var i = 0; i < unsupportedLLDsWithHost.length; i++) { delete unsupportedLLDsWithHost[i].sort; }
            
            
            
            // iterate through host objects which hosts "Zabbix agent (active)" items
            Zabbix.Log(params.loglevel, "Zabbix API, extract unavailable and unknown ZBX active checks");
            
            var activeUnavailable2 = [];
            var activeUnknown0 = [];
            
            // this holds only hostid's which run ZBX active items
            for (a in onlyActiveHostList) {
            
                // need to map back with host name and proxy
                var host = hostMap[onlyActiveHostList[a]];
                if (host) {
                    var proxy = proxyMap[host.proxyid];
                    if (proxy) { proxyName = proxy.name; } else { proxyName = ''; }
            
            
                    if (parseInt(host.active_available) === 2 && parseInt(host.hostid) === parseInt(onlyActiveHostList[a])) {
                        var row = {};
                        row["proxy"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=proxy.list&filter_name=' + proxyName + '&filter_operating_mode=-1&filter_version=-1&filter_set=1\' target=\'_blank\'>' + proxyName + '</a>';
                        row["host"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=host.list&filter_host=' + host.name + '&filter_dns=&filter_ip=&filter_port=&filter_status=-1&filter_monitored_by=-1&filter_evaltype=0&filter_tags[0][tag]=&filter_tags[0][operator]=0&filter_tags[0][value]=&filter_set=1\' target=\'_blank\'>' + host.name + '</a>';
                        activeUnavailable2.push(row);
                    }
                    if (parseInt(host.active_available) === 0 && parseInt(host.hostid) === parseInt(onlyActiveHostList[a])) {
                        var row = {};
                        row["proxy"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=proxy.list&filter_name=' + proxyName + '&filter_operating_mode=-1&filter_version=-1&filter_set=1\' target=\'_blank\'>' + proxyName + '</a>';
                        row["host"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=host.list&filter_host=' + host.name + '&filter_dns=&filter_ip=&filter_port=&filter_status=-1&filter_monitored_by=-1&filter_evaltype=0&filter_tags[0][tag]=&filter_tags[0][operator]=0&filter_tags[0][value]=&filter_set=1\' target=\'_blank\'>' + host.name + '</a>';
                        activeUnknown0.push(row);
                    }
                }
            }
            
            // output will be an array
            Zabbix.Log(params.loglevel, "Zabbix API, passive ZBX, SNMP, JMX interfaces");
            var passiveNotWorking = [];
            var passiveNotUsed = [];
            // take one full itemid containing all characteristics like key_, units, name
            for (i in interfaceList) {
                // merge interface table with host table by using "hostid" as mapping field
                for (h in hostList) {
                    // check if there is a match between the hostid which belongs at item level and the host array
                    if (
                        interfaceList[i].hostid === hostList[h].hostid
                        &&
                        parseInt(interfaceList[i].main) === 1
                        &&
                        parseInt(hostList[h].status) === 0
                        &&
                        parseInt(interfaceList[i].available) !== 1
                    ) {
                        var row = {};
            
                        // locate passive checks
                        if (parseInt(interfaceList[i].useip) === 1) {
                            row["connect"] = interfaceList[i].ip;
                        } else {
                            row["connect"] = interfaceList[i].dns;
                        }
            
                        row["type"] = interfaceList[i].type;
                        row["port"] = interfaceList[i].port;
            
                        for (p in proxyList) {
                            // check if this host belongs to proxy
                            if (parseInt(hostList[h].proxyid) > 0) {
                                // iterate through list and try to map with existing proxy name
                                if (parseInt(hostList[h].proxyid) === parseInt(proxyList[p].proxyid)) {
                                    row["proxy"] = proxyList[p].name;
                                    break;
                                }
                            } else {
                                row["proxy"] = '';
                            }
                        }
                        row["error"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=host.list&filter_host=' + hostList[h].name + '&filter_dns=&filter_ip=&filter_port=&filter_status=-1&filter_monitored_by=-1&filter_evaltype=0&filter_tags[0][tag]=&filter_tags[0][operator]=0&filter_tags[0][value]=&filter_set=1\' target=\'_blank\'>' + interfaceList[i].error + '</a>';
            
            
                        if (interfaceList[i].error !== '') {
                            row["host"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=host.edit&hostid=' + hostList[h].hostid + '\' target=\'_blank\'>' + hostList[h].name + '</a>';
                            passiveNotWorking.push(row);
                        } else {
                            row["host"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=host.edit&hostid=' + hostList[h].hostid + '\' target=\'_blank\'>' + hostList[h].name + '</a>';
                            passiveNotUsed.push(row);
                        }
                    }
                }
            
            }
            
            // for not used interfaces delete column "error"
            for (var i = 0; i < passiveNotUsed.length; i++) { delete passiveNotUsed[i].error; }
            
            
            // return debug info
            //     'unsupportedLLDs': unsupportedLLDs,
            //     'disabledHostList': disabledHostList,
            Zabbix.Log(params.loglevel, "Zabbix API, end and return");
            
            Zabbix.Log(3, "Zabbix API, stats ended");
            
            var scriptEnded = Date.now() / 1000;
            
            
            
            var visitItemRatio = [];
            var BadPercentItems = calculateBadPercent(ratioItemKeyWorking);
            for (b in BadPercentItems) {
                    var row = {};
                    row["ratio bad"] = BadPercentItems[b].bad;
                    row["count"] = BadPercentItems[b].count;
                    row["key"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=item.list&context=host&filter_name=&filter_key=' + BadPercentItems[b].key_ + '&filter_type=-1&filter_value_type=-1&filter_history=&filter_trends=&filter_delay=&filter_evaltype=0&filter_tags%5B0%5D%5Btag%5D=&filter_tags%5B0%5D%5Boperator%5D=0&filter_tags%5B0%5D%5Bvalue%5D=&filter_state=-1&filter_status=-1&filter_with_triggers=-1&filter_inherited=-1&filter_discovered=-1&filter_set=1\' target=\'_blank\'>' + BadPercentItems[b].key_ + '</a>';
                    visitItemRatio.push(row);
            }
            
            
            
            return JSON.stringify({
                'triggersWithErrorsWithHost': triggersWithErrorsWithHost,
                'triggersWithErrors': triggersWithErrors,
                'triggerList': triggerList,
                'timeAPIfetching': (calculationStarts - scriptStarts),
                'timeAggregate': (scriptEnded - calculationStarts),
                'timeTotal': (scriptEnded - scriptStarts),
                'ratioItemKeyWorking': visitItemRatio,
                'disabledHosts': disabledHosts,
                'itemsAreRunningWithHost': itemsAreRunningWithHost,
                'passiveNotUsed': passiveNotUsed,
                'disabledItemsCount': disabledItemsCount,
                'unsupportedItemsCount': unsupportedItemsCount,
                'disabledItemsWithHost': disabledItemsWithHost,
                'unsupportedLLDsWithHost': unsupportedLLDsWithHost,
                'unsupportedItemsWithHost': unsupportedItemsWithHost,
                'unsupportedItems': unsupportedItems,
                'disabledItems': disabledItems,
                'passiveNotWorking': passiveNotWorking,
                'proxyList': proxyList,
                'onlyActiveHostList': onlyActiveHostList,
                'activeUnavailable2': activeUnavailable2,
                'activeUnknown0': activeUnknown0
            });
          timeout: 5m
          parameters:
            - name: loglevel
              value: '{$DEBUG.LEVEL}'
            - name: token
              value: '{$Z_API_SESSIONID}'
            - name: url
              value: '{$ZABBIX.URL}'
        - uuid: e061f7d1b06d4828b841837ed20fc51a
          name: disabledHostsHTML
          type: DEPENDENT
          key: 'HTML[disabledHosts]'
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'{$CSS:table}\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: disabledHosts
        - uuid: 9d6c2032368d47d2a065a3ee0f40ee0c
          name: itemsAreRunningWithHostHTML
          type: DEPENDENT
          key: 'HTML[itemsAreRunningWithHost]'
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'{$CSS:table}\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: itemsAreRunningWithHost
        - uuid: 8e0e27d8a35f42b9bfd1f84cef468817
          name: JMXNotWorkingHTML
          type: DEPENDENT
          key: 'HTML[JMX]'
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'{$CSS:table}\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: type4
        - uuid: 9cc6a4457a574da784c823ee8483f518
          name: ratioItemKeyWorkingHTML
          type: DEPENDENT
          key: 'HTML[ratioItemKeyWorking]'
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'{$CSS:table}\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: ratioItemKeyWorking
        - uuid: 5fcf14bf86af466d927fac5f5ec6a4e4
          name: SNMPNotWorkingHTML
          type: DEPENDENT
          key: 'HTML[SNMP]'
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'{$CSS:table}\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: type2
        - uuid: 00580c45707d4a9ebf1c2c91fa5c5d37
          name: triggersWithErrorsWithHostHTML
          type: DEPENDENT
          key: 'HTML[triggersWithErrorsWithHost]'
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'{$CSS:table}\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: triggersWithErrorsWithHost
        - uuid: b22c4daf7442495892356718f335cdcf
          name: passiveNotUsedHTML
          type: DEPENDENT
          key: 'HTML[ZBXnotUsed]'
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'{$CSS:table}\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: passiveNotUsed
        - uuid: 46866c579ad247deb6c63affaaef24e0
          name: ZBXNotWorkingHTML
          type: DEPENDENT
          key: 'HTML[ZBX]'
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'{$CSS:table}\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: type1
        - uuid: 23d932a188254330b6305709e6811147
          name: itemsAreRunningWithHost
          type: DEPENDENT
          key: itemsAreRunningWithHost
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.itemsAreRunningWithHost
            - type: JSONPATH
              parameters:
                - '$.[0:{$RECORDS}]'
          master_item:
            key: fetch
        - uuid: 37457fe46f0b4ffbba61d80bb109bea0
          name: passiveNotUsed
          type: DEPENDENT
          key: passiveNotUsed
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.passiveNotUsed
          master_item:
            key: fetch
        - uuid: 09942bc4641e486f872594c175a9b1f4
          name: PassiveNotWorking
          type: DEPENDENT
          key: PassiveNotWorking
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.passiveNotWorking
          master_item:
            key: fetch
        - uuid: a8ee8e19c1594a66b76c35fab9056886
          name: ratioItemKeyWorking
          type: DEPENDENT
          key: ratioItemKeyWorking
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.ratioItemKeyWorking
            - type: JSONPATH
              parameters:
                - '$..[?(@.[''ratio bad''] > 0)]'
            - type: JSONPATH
              parameters:
                - '$.[0:{$RECORDS}]'
          master_item:
            key: fetch
        - uuid: 07c9feba0b81428d9594635838a44385
          name: timeAggregate
          type: DEPENDENT
          key: timeAggregate
          delay: '0'
          history: '{$DBG}'
          value_type: FLOAT
          trends: '0'
          units: s
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.timeAggregate
          master_item:
            key: fetch
        - uuid: 462f8d5ec1bc42c1ac4e21e30b2718e6
          name: timeAPIfetching
          type: DEPENDENT
          key: timeAPIfetching
          delay: '0'
          history: '{$DBG}'
          value_type: FLOAT
          trends: '0'
          units: s
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.timeAPIfetching
          master_item:
            key: fetch
        - uuid: ba6e1bbc32594f9ba5bfe55e84a790dc
          name: timeTotal
          type: DEPENDENT
          key: timeTotal
          delay: '0'
          history: '{$DBG}'
          value_type: FLOAT
          trends: '0'
          units: s
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.timeTotal
          master_item:
            key: fetch
        - uuid: cf14de0a19e8426ab875538c856656ef
          name: triggerList
          type: DEPENDENT
          key: triggerList
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.triggerList
          master_item:
            key: fetch
        - uuid: 6e3cb30e866646e7946c76d3c0598f4e
          name: triggersWithErrorsWithHost
          type: DEPENDENT
          key: triggersWithErrorsWithHost
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.triggersWithErrorsWithHost
            - type: JSONPATH
              parameters:
                - '$.[0:{$RECORDS}]'
          master_item:
            key: fetch
        - uuid: 70f5450aba11478abb3f7b770128d3b0
          name: 'ZBX not working'
          type: DEPENDENT
          key: type1
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$..[?(@.type == 1)]'
            - type: JAVASCRIPT
              parameters:
                - 'var data = JSON.parse(value); for (var i = 0; i < data.length; i++) {delete data[i].type} return JSON.stringify(data);'
          master_item:
            key: PassiveNotWorking
        - uuid: b80b216d60b649fe90e070415bde5851
          name: 'SNMP not working'
          type: DEPENDENT
          key: type2
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$..[?(@.type == 2)]'
            - type: JAVASCRIPT
              parameters:
                - 'var data = JSON.parse(value); for (var i = 0; i < data.length; i++) {delete data[i].type} return JSON.stringify(data);'
          master_item:
            key: PassiveNotWorking
        - uuid: bb7ec05eb3e644b4b71242b09e36173c
          name: 'JMX not working'
          type: DEPENDENT
          key: type4
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$..[?(@.type == 4)]'
            - type: JAVASCRIPT
              parameters:
                - 'var data = JSON.parse(value); for (var i = 0; i < data.length; i++) {delete data[i].type} return JSON.stringify(data);'
          master_item:
            key: PassiveNotWorking
        - uuid: 3b8fc416e0fc4c53a8e4b7ab6c61201f
          name: UnavailableHTML
          type: DEPENDENT
          key: UnavailableHTML
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'{$CSS:table}\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: ActiveUnavailable
        - uuid: da61f288959649138010ee739636b75a
          name: UnknownHTML
          type: DEPENDENT
          key: UnknownHTML
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'{$CSS:table}\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: ActiveUnknown
        - uuid: 41ec3536fbde48fa815dfa6c6bd05558
          name: unsupportedItems
          type: DEPENDENT
          key: unsupportedItems
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.unsupportedItems
            - type: JSONPATH
              parameters:
                - '$.[0:{$RECORDS}]'
          master_item:
            key: fetch
        - uuid: e256add543e0418b9d4a9779f4b19c75
          name: unsupportedItemsCount
          type: DEPENDENT
          key: unsupportedItemsCount
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.unsupportedItemsCount
          master_item:
            key: fetch
        - uuid: 57954c1651764e898272f8a6641b7dda
          name: unsupportedItemsWithHost
          type: DEPENDENT
          key: unsupportedItemsWithHost
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.unsupportedItemsWithHost
          master_item:
            key: fetch
        - uuid: d34301d7d57f4bb0a5ab873dca5fdcb3
          name: unsupportedItemsWithHostHTML
          type: DEPENDENT
          key: unsupportedItemsWithHostHTML
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'{$CSS:table}\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: unsupportedItemsWithHost
        - uuid: bbef945edd5d4b81b35714a629fd0be9
          name: unsupportedLLDsWithHost
          type: DEPENDENT
          key: unsupportedLLDsWithHost
          delay: '0'
          history: '{$DBG}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.unsupportedLLDsWithHost
          master_item:
            key: fetch
        - uuid: d53c0b3a65af460380cbe273e3685216
          name: unsupportedLLDsWithHostHTML
          type: DEPENDENT
          key: unsupportedLLDsWithHostHTML
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'{$CSS:table}\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: unsupportedLLDsWithHost
      macros:
        - macro: '{$CSS:table}'
          value: 'width:100%;border:1px gray solid'
        - macro: '{$CSS:table.td}'
          value: 'border:1px gray dotted'
        - macro: '{$CSS:table.th}'
          value: 'border:1px gray dotted;font-weight:bold'
        - macro: '{$DBG}'
          value: 1d
        - macro: '{$DEBUG.LEVEL}'
          value: '4'
        - macro: '{$RECORDS}'
          value: '99'
        - macro: '{$UPD}'
          value: 1m
      dashboards:
        - uuid: c100b83607c344b888273653b13e8da4
          name: Summary
          display_period: '3600'
          auto_start: 'NO'
          pages:
            - name: 'active checks'
              widgets:
                - type: itemhistory
                  name: 'Not available'
                  width: '36'
                  height: '64'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: UnavailableHTML
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'Unavailable Zabbix agent (active) checks'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: AAAZE
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
                - type: itemhistory
                  name: Unknown
                  x: '36'
                  width: '36'
                  height: '64'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: UnknownHTML
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'Unknown Zabbix agent (active) checks'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: EBARB
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
            - name: 'Interfaces: ZBX'
              widgets:
                - type: itemhistory
                  name: 'Zabbix agent passive checks is not available'
                  width: '72'
                  height: '64'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: 'HTML[ZBX]'
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'Unavailable Zabbix agent (active) checks'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ZWNBS
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
            - name: SNMP
              widgets:
                - type: itemhistory
                  name: 'SNMP interface is not working'
                  width: '72'
                  height: '64'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: 'HTML[SNMP]'
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'Unavailable Zabbix agent (active) checks'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: VCPQJ
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
            - name: JXM
              widgets:
                - type: itemhistory
                  name: 'JMX interface is not working'
                  width: '72'
                  height: '64'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: 'HTML[JMX]'
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'JMX interface not working'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: SNBKA
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
            - name: 'not used'
              widgets:
                - type: itemhistory
                  name: 'interface is registred, but not giving green feedback'
                  width: '72'
                  height: '64'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: 'HTML[ZBXnotUsed]'
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'passive interfaces not in use'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: KVPOZ
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
            - name: 'items: unsupported'
              widgets:
                - type: itemhistory
                  name: 'unsupported items'
                  width: '72'
                  height: '64'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: unsupportedItemsWithHostHTML
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'unsupported items'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: CQVQG
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
            - name: LLDs
              widgets:
                - type: itemhistory
                  name: 'unsupported LLDs'
                  width: '72'
                  height: '64'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: unsupportedLLDsWithHostHTML
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'unsupported LLDs'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: MNBCZ
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
            - name: enabled
              widgets:
                - type: itemhistory
                  name: 'most enabled items'
                  width: '72'
                  height: '64'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: 'HTML[itemsAreRunningWithHost]'
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'most enabled items'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: TNILN
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
            - name: disabled
              widgets:
                - type: itemhistory
                  name: 'disabled items'
                  width: '72'
                  height: '64'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: disabledItemsWithHostHTML
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'disabled items'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: DBXEV
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
            - name: ratio
              widgets:
                - type: itemhistory
                  name: 'ratio of not working items'
                  width: '72'
                  height: '64'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: 'HTML[ratioItemKeyWorking]'
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'ratio of not working items'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: EQPUA
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
            - name: 'triggers with errors'
              widgets:
                - type: itemhistory
                  name: 'triggers with errors'
                  width: '72'
                  height: '64'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: 'HTML[triggersWithErrorsWithHost]'
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'triggers with errors'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: OSCQR
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
            - name: 'disabled hosts'
              widgets:
                - type: itemhistory
                  name: 'disabled hosts'
                  width: '72'
                  height: '64'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: 'HTML[disabledHosts]'
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'disabled hosts'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: XXQQR
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
