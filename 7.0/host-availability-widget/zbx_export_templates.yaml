zabbix_export:
  version: '7.0'
  template_groups:
    - uuid: 57b7ae836ca64446ba2c296389c009b7
      name: Templates/Modules
  templates:
    - uuid: 06f5beff8644415e878816d05aec7309
      template: 'Host availability widget Zabbix API'
      name: 'Host availability widget Zabbix API'
      groups:
        - name: Templates/Modules
      items:
        - uuid: a1fbf59be79a40408aa6a1bb6c1b783d
          name: ActiveUnavailable
          type: DEPENDENT
          key: ActiveUnavailable
          delay: '0'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.activeUnavailable2
          master_item:
            key: fetch
        - uuid: 4aa30adc006747aeb326a8ff13547163
          name: ActiveUnknown
          type: DEPENDENT
          key: ActiveUnknown
          delay: '0'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.activeUnknown0
          master_item:
            key: fetch
        - uuid: 5702e585ab8f4d31b1fe0f7c8cb833c0
          name: Fetch
          type: CALCULATED
          key: fetch
          delay: 1h
          value_type: LOG
          trends: '0'
          params: '1'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  // gather interface, host status
                  
                  token = '{$Z_API_SESSIONID}';
                  url = '{$ZABBIX.URL}' + '/api_jsonrpc.php';
                  
                  var req = new HttpRequest();
                  req.addHeader('Content-Type: application/json');
                  req.addHeader('Authorization: Bearer ' + token);
                  
                  // zabbix agent active (type:7) item list from a real host object
                  var activeItemList = JSON.parse(req.post(url,
                      '{"jsonrpc":"2.0","method":"item.get","params":{"output":["hostid"],"monitored":1,"filter":{"type":7}},"id":1}'
                  )).result;
                  
                  // unique hostid's with active checks
                  var uniqueHostIds = {};
                  var onlyActiveHostList = [];
                  var i;
                  for (i = 0; i < activeItemList.length; i++) {
                      var hostid = activeItemList[i].hostid;
                      if (!uniqueHostIds[hostid]) {
                          uniqueHostIds[hostid] = true;
                          onlyActiveHostList.push(hostid);
                      }
                  }
                  
                  // get list of interfaces
                  var interfaceList = JSON.parse(req.post(url,
                      '{"jsonrpc":"2.0","method":"hostinterface.get","params":{"output":["errors_from","disable_until","dns","main","error","available","useip","hostid","type","port","ip"]},"id": 1}'
                  )).result;
                  
                  
                  // get list of hosts
                  var hostList = JSON.parse(req.post(url,
                      '{"jsonrpc":"2.0","method":"host.get","params":{"output":["host","name","hostid","status","proxyid","active_available"]},"id": 1}'
                  )).result;
                  
                  // get list of proxies
                  var proxyList = JSON.parse(req.post(url,
                      '{"jsonrpc":"2.0","method":"proxy.get","params":{"output":["name","proxyid"]},"id": 1}'
                  )).result;
                  
                  
                  // iterate through host objects which hosts "Zabbix agent (active)" items
                  var activeUnavailable2 = [];
                  var activeUnknown0 = [];
                  for (a in onlyActiveHostList) {
                      for (h in hostList) {
                  
                          // find proxy name
                          var proxyName = '';
                          if (parseInt(hostList[h].hostid) === parseInt(onlyActiveHostList[a])) {
                              for (p in proxyList) {
                                  if (proxyList[p].proxyid === hostList[h].proxyid) {
                                      proxyName = proxyList[p].name;
                                  }
                              }
                          }
                  
                  
                  
                          if (parseInt(hostList[h].active_available) === 2 && parseInt(hostList[h].hostid) === parseInt(onlyActiveHostList[a])) {
                              var row = {};
                              row["proxy"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=proxy.list&filter_name=' + proxyName + '&filter_operating_mode=-1&filter_version=-1&filter_set=1\' target=\'_blank\'>' + proxyName + '</a>';
                              row["host"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=host.edit&hostid=' + hostList[h].hostid + '\' target=\'_blank\'>' + hostList[h].name + '</a>';
                              activeUnavailable2.push(row);
                          }
                          if (parseInt(hostList[h].active_available) === 0 && parseInt(hostList[h].hostid) === parseInt(onlyActiveHostList[a])) {
                              var row = {};
                              row["proxy"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=proxy.list&filter_name=' + proxyName + '&filter_operating_mode=-1&filter_version=-1&filter_set=1\' target=\'_blank\'>' + proxyName + '</a>';
                              row["host"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=host.edit&hostid=' + hostList[h].hostid + '\' target=\'_blank\'>' + hostList[h].name + '</a>';
                              activeUnknown0.push(row);
                          }
                      }
                  }
                  
                  // output will be an array
                  var passiveNotWorking = [];
                  
                  // take one full itemid containing all characteristics like key_, units, name
                  for (i in interfaceList) {
                      // merge interface table with host table by using "hostid" as mapping field
                      for (h in hostList) {
                          // check if there is a match between the hostid which belongs at item level and the host array
                          if (
                              interfaceList[i].hostid === hostList[h].hostid
                              &&
                              parseInt(interfaceList[i].main) === 1
                              &&
                              parseInt(hostList[h].status) === 0
                              &&
                              parseInt(interfaceList[i].available) !== 1
                          ) {
                              var row = {};
                              row["host"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=host.edit&hostid=' + hostList[h].hostid + '\' target=\'_blank\'>' + hostList[h].name + '</a>';
                              row["error"] = interfaceList[i].error;
                  
                              // locate passive checks
                              if (parseInt(interfaceList[i].useip) === 1) {
                                  row["connect"] = interfaceList[i].ip;
                              } else {
                                  row["connect"] = interfaceList[i].dns;
                              }
                  
                              row["type"] = interfaceList[i].type;
                              row["port"] = interfaceList[i].port;
                  
                              for (p in proxyList) {
                                  // check if this host belongs to proxy
                                  if (parseInt(hostList[h].proxyid) > 0) {
                                      // iterate through list and try to map with existing proxy name
                                      if (parseInt(hostList[h].proxyid) === parseInt(proxyList[p].proxyid)) {
                                          row["proxy"] = proxyList[p].name;
                                          break;
                                      }
                                  } else {
                                      row["proxy"] = '';
                                  }
                              }
                  
                              // map the host list with proxy (if there is even a proxy)
                              passiveNotWorking.push(row);
                  
                          }
                      }
                  
                  }
                  
                  // return debug info
                  return JSON.stringify({
                      'passiveNotWorking': passiveNotWorking,
                      'proxyList': proxyList,
                      'onlyActiveHostList': onlyActiveHostList,
                      'activeUnavailable2': activeUnavailable2,
                      'activeUnknown0': activeUnknown0
                  });
        - uuid: 09942bc4641e486f872594c175a9b1f4
          name: PassiveNotWorking
          type: DEPENDENT
          key: PassiveNotWorking
          delay: '0'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.passiveNotWorking
          master_item:
            key: fetch
        - uuid: 46866c579ad247deb6c63affaaef24e0
          name: PassiveNotWorkingHTML
          type: DEPENDENT
          key: PassiveNotWorkingHTML
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'border:1px gray solid\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: PassiveNotWorking
        - uuid: 3b8fc416e0fc4c53a8e4b7ab6c61201f
          name: UnavailableHTML
          type: DEPENDENT
          key: UnavailableHTML
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'border:1px gray solid\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: ActiveUnavailable
        - uuid: da61f288959649138010ee739636b75a
          name: UnknownHTML
          type: DEPENDENT
          key: UnknownHTML
          delay: '0'
          history: 90d
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'border:1px gray solid\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px gray dotted;font-weight:bold\'>' + (getValues(header).join('</th><th style=\'border:1px gray dotted;font-weight:bold\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px gray dotted\'>' + (rows[i].join('</td><td style=\'border:1px gray dotted\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: ActiveUnknown
      macros:
        - macro: '{$CSS:table}'
          value: 'border:1px gray solid'
        - macro: '{$CSS:table.td}'
          value: 'border:1px gray dotted'
        - macro: '{$CSS:table.th}'
          value: 'border:1px gray dotted;font-weight:bold'
        - macro: '{$RECORDS}'
          value: '50'
      dashboards:
        - uuid: c100b83607c344b888273653b13e8da4
          name: 'Unavailable hosts'
          display_period: '3600'
          pages:
            - name: 'Zabbix agent (active) checks'
              widgets:
                - type: itemhistory
                  name: Unavailable
                  width: '36'
                  height: '7'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: UnavailableHTML
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'Unavailable Zabbix agent (active) checks'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: AAAZE
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
                - type: itemhistory
                  name: 'Passive not working'
                  'y': '7'
                  width: '72'
                  height: '7'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: PassiveNotWorkingHTML
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'Unavailable Zabbix agent (active) checks'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: SYXDR
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
                - type: itemhistory
                  name: Unknown
                  x: '36'
                  width: '36'
                  height: '7'
                  fields:
                    - type: INTEGER
                      name: columns.0.display
                      value: '4'
                    - type: ITEM
                      name: columns.0.itemid
                      value:
                        host: 'Host availability widget Zabbix API'
                        key: UnknownHTML
                    - type: INTEGER
                      name: columns.0.monospace_font
                      value: '1'
                    - type: STRING
                      name: columns.0.name
                      value: 'Unknown Zabbix agent (active) checks'
                    - type: INTEGER
                      name: layout
                      value: '1'
                    - type: STRING
                      name: reference
                      value: EBARB
                    - type: INTEGER
                      name: show_column_header
                      value: '0'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: sortorder
                      value: '1'
                    - type: STRING
                      name: time_period.from
                      value: now-1y
                    - type: STRING
                      name: time_period.to
                      value: now
