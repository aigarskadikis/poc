zabbix_export:
  version: '7.0'
  template_groups:
    - uuid: 57b7ae836ca64446ba2c296389c009b7
      name: Templates/Modules
  templates:
    - uuid: 4c7fd73e09cc4eeebb29bdd2266e8bf8
      template: 'summarize zabbix_proxy.conf pod'
      name: 'summarize zabbix_proxy.conf pod'
      groups:
        - name: Templates/Modules
      items:
        - uuid: 89223d9e596a44a48b0ed902e1415fc4
          name: 'Active lines'
          type: DEPENDENT
          key: active.lines
          delay: '0'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var data = [];
                  var lines = value.match(/^([a-zA-Z0-9]+=.*)/gm);
                  var lines_num = lines.length;
                  for (i = 0; i < lines_num; i++) {
                    var row = {};
                    row["setting"] = lines[i].match(/^([a-zA-Z0-9]+)=.*/)[1];
                    row["theValue"] = lines[i].match(/^[a-zA-Z0-9]+=(.*)/)[1];
                    data.push(row);
                  }
                  return JSON.stringify(data);
          master_item:
            key: 'vfs.file.contents["/etc/zabbix/zabbix_proxy.conf",]'
          tags:
            - tag: raw
              value: zabbixproxy
        - uuid: 22ce565bf16e42d1bf6db307ce937e55
          name: base64.zabbix_proxy.conf
          type: TRAP
          key: base64.zabbix_proxy.conf
          delay: '0'
          value_type: LOG
          trends: '0'
        - uuid: bdf1ae71ed0e4e2e9f66e7f15028b1fd
          name: 'cat zabbix_proxy.conf'
          type: EXTERNAL
          key: 'cat.sh[/etc/zabbix/zabbix_proxy.conf]'
          delay: 1d
          value_type: LOG
          trends: '0'
        - uuid: b5a59cf6129541aa9f188f91fceb61d6
          name: 'Create task'
          type: CALCULATED
          key: create.task
          delay: 5m
          history: 90d
          value_type: LOG
          trends: '0'
          params: '1'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var params = JSON.parse(value);
                  
                  token = '{$Z_API_SESSIONID}';
                  url = '{$ZABBIX.URL}' + '/api_jsonrpc.php';
                  host = '{$HOST.HOST}';
                  script = '{$SCRIPT.NAME}';
                  
                  var request = new HttpRequest();
                  request.addHeader('Content-Type: application/json');
                  request.addHeader('Authorization: Bearer ' + token);
                  
                  // fetch all possible scripts
                  var allScripts = JSON.parse(request.post(url,
                      '{"jsonrpc":"2.0","method":"script.get","params":{"output":["scriptid","name"]},"id":1}'
                  )).result;
                  
                  // fetch all host IDs
                  var allHosts = JSON.parse(request.post(url,
                      '{"jsonrpc":"2.0","method":"host.get","params":{"output":["hostid","host"]},"id":1}'
                  )).result;
                  
                  // find hostid
                  var hostid = 0;
                  for (var n = 0; n < allHosts.length; n++) {
                      if (allHosts[n].host === host) {
                          hostid = parseInt(allHosts[n].hostid); break;
                      }
                  }
                  
                  // find scriptid
                  var scriptid = 0;
                  for (var n = 0; n < allScripts.length; n++) {
                      if (allScripts[n].name === script) {
                          scriptid = parseInt(allScripts[n].scriptid); break;
                      }
                  }
                  
                  // execute and save outcome as txt
                  result = '';
                  if (scriptid > 0) {
                      var result = JSON.parse(request.post(url,
                          '{"jsonrpc":"2.0","method":"script.execute","params":{"scriptid":"' + scriptid + '","hostid":"' + hostid + '"},"id":1}'
                      )).result;
                  }
                  
                  // print debug summary
                  return JSON.stringify({
                      'allScripts': allScripts,
                      'scriptid': scriptid,
                      'result': result
                  });
        - uuid: 78b1867f6403447f84370225e47be3bc
          name: zabbix_proxy.conf
          type: DEPENDENT
          key: 'vfs.file.contents["/etc/zabbix/zabbix_proxy.conf",]'
          delay: '0'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - 'var buffer = atob(value); return String.fromCharCode.apply(this, [].slice.call(buffer));'
          master_item:
            key: base64.zabbix_proxy.conf
          tags:
            - tag: raw
              value: zabbixproxy
      discovery_rules:
        - uuid: 4570afd9ee9b48d681556969e2710b03
          name: conf
          type: DEPENDENT
          key: conf
          delay: '0'
          item_prototypes:
            - uuid: 854e3c7f675a4d6e8f151878df8a5178
              name: '{#SETTING}'
              type: DEPENDENT
              key: 'setting[{#SETTING}]'
              delay: '0'
              value_type: CHAR
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..[?(@.setting== ''{#SETTING}'')].theValue.first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: active.lines
              tags:
                - tag: conf
                  value: zabbixproxy
          master_item:
            key: active.lines
          lld_macro_paths:
            - lld_macro: '{#SETTING}'
              path: '$.[''setting'']'
      macros:
        - macro: '{$SCRIPT.NAME}'
          value: 'pick up zabbix_proxy.conf'
