zabbix_export:
  version: '7.0'
  template_groups:
    - uuid: bc222ed8fc494eb5851b7f65b54af37e
      name: pidmon
    - uuid: 57b7ae836ca64446ba2c296389c009b7
      name: Templates/Modules
  host_groups:
    - uuid: 7f382af7c7b84f3cbafc386c3cd40e59
      name: PrID
  templates:
    - uuid: 43c25f57edaa409b8624e6657d7b7281
      template: 'pid mon'
      name: 'pid mon'
      groups:
        - name: pidmon
      items:
        - uuid: ce6951aecef449bcb835ad44362222e7
          name: cmdline.list
          type: DEPENDENT
          key: cmdline.list
          delay: '0'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var lld = [];
                  var lines = JSON.parse(value);
                  var output = '';
                  for (i = 0; i < lines.length; i++) {
                  output = output + lines[i].cmdline.replace(/\s+$/, '').replace(/ \[[^\]]+\]$/, '');
                  if (i !== lines.length) output = output + '\n';
                  }
                  
                  return output;
          master_item:
            key: 'proc.get[,,,process]'
          tags:
            - tag: ppid
        - uuid: 6bf0832ab68749258f05a95eb7ef8369
          name: element.clount.of.process
          type: DEPENDENT
          key: element.clount.of.process
          delay: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.length()
          master_item:
            key: process.path.translated
          tags:
            - tag: ppid
          triggers:
            - uuid: 6ba20c8da1554484ae616d6d14221768
              expression: 'last(/pid mon/element.clount.of.process) > ( {$SCH:delay} - 20 )'
              name: 'process monitoring has reached'
              event_name: 'process monitoring has reached {$SCH:delay} elements'
              priority: DISASTER
              manual_close: 'YES'
        - uuid: a4becf905f2d486e840a730cd6c9c3e5
          name: 'process.get raw'
          key: 'proc.get[,,,process]'
          delay: '{$SCH:delay}'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$..[?(!(@.[''ppid''] == 2))]'
              error_handler: CUSTOM_VALUE
              error_handler_params: '[]'
            - type: JSONPATH
              parameters:
                - '$..[?(@.["ppid"] > 0)]'
              error_handler: CUSTOM_VALUE
              error_handler_params: '[]'
            - type: JSONPATH
              parameters:
                - '$..[?(!(@.[''cmdline''] =~ ''digitalocean''))]'
              error_handler: CUSTOM_VALUE
              error_handler_params: '[]'
            - type: JSONPATH
              parameters:
                - '$..[?(!(@.[''name''] =~ ''^{$COMM:ignore}$''))]'
              error_handler: CUSTOM_VALUE
              error_handler_params: '[]'
            - type: JAVASCRIPT
              parameters:
                - |
                  var lld = [];
                  var lines = JSON.parse(value);
                  for (i = 0; i < lines.length; i++) {
                    var row = {};
                    row["pid"] = lines[i].pid;
                    row["ppid"] = lines[i].ppid;
                    row["name"] = lines[i].name;
                    row["cmdline"] = lines[i].cmdline.replace(/\s+$/, '').replace(/ \[[^\]]+\]$/, '');
                    lld.push(row);
                  }
                  
                  return JSON.stringify(lld);
            - type: JAVASCRIPT
              parameters:
                - |
                  // sort
                  function sortJson(obj) {
                    if (Object.prototype.toString.call(obj) === '[object Object]') {
                      var sortedObj = {};
                      var keys = [];
                      for (var key in obj) {
                        if (obj.hasOwnProperty(key)) {
                          keys.push(key);
                        }
                      }
                      keys.sort();
                      for (var i = 0; i < keys.length; i++) {
                        var k = keys[i];
                        sortedObj[k] = sortJson(obj[k]);
                      }
                      return sortedObj;
                    } else if (Object.prototype.toString.call(obj) === '[object Array]') {
                      var sortedArray = [];
                      for (var j = 0; j < obj.length; j++) {
                        sortedArray.push(sortJson(obj[j]));
                      }
                      return sortedArray.sort(function (a, b) {
                        return JSON.stringify(a) > JSON.stringify(b) ? 1 : -1;
                      });
                    } else {
                      return obj;
                    }
                  }
                  
                  return JSON.stringify(sortJson(JSON.parse(value)));
                  
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: ppid
        - uuid: ce04e585829147b5a1a3687835c3ffb9
          name: 'process path debug'
          type: DEPENDENT
          key: process.path.debug
          delay: '0'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  //delay = {$SCH:delay};
                  // delay = 300;
                  
                  var lld = [];
                  var lines = JSON.parse(value);
                  for (i = 0; i < lines.length; i++) {
                    Zabbix.Log(3, JSON.stringify(lines[i]));
                    var row = {};
                    row["pid"] = lines[i].pid;
                    row["ppid"] = lines[i].ppid;
                    row["name"] = lines[i].name;
                  
                   // row["cmdline"] = lines[i].cmdline.match(/pidfile/) ? 'pod ' +
                   //   lines[i].cmdline.match(/pidfile....(.*)...exit.dir/)[1] :
                   //   lines[i].cmdline.replace(/ \[[^\]]+\]$/, '').replace(/^.*\//gm, '').replace(/[^a-zA-Z0-9\. ]/g, '');
                  
                    // special formating rule
                    row["host"] = '';
                   //if (lines[i].cmdline.match(/pidfile/)) {
                   //   row["host"] = 'pod ' + lines[i].cmdline.replace(/\s+$/, '').match(/pidfile....(.*)...exit.dir/)[1];
                   // } else if (lines[i].cmdline.match(/postgres: \S+ \S+ [0-9.]+/)) {
                    //  row["host"] = lines[i].cmdline.replace(/\s+$/, '').match(/(postgres: \S+ \S+ [0-9.]+)/)[1].replace(/[^a-zA-Z0-9\. ]/g, '');
                   // } else {
                   //   row["host"] = lines[i].cmdline.replace(/\s+$/, '').replace(/ \[[^\]]+\]$/, '').replace(/^.*\//gm, '').replace(/[^a-zA-Z0-9\. ]/g, '');
                   // }
                  
                  
                    lld.push(row);
                  }
                  
                  var processes = lld;
                  
                  // Create a mapping from pid to process
                  var pidMap = {};
                  for (var i = 0; i < processes.length; i++) {
                    pidMap[processes[i].pid] = processes[i];
                  }
                  
                  // Function to build full path from root to a given pid
                  function buildPath(pid) {
                    var path = [];
                    while (pidMap[pid]) {
                      path.unshift(pid);
                      pid = pidMap[pid].ppid;
                    }
                    path.unshift(pid); // Add the root (e.g., 1)
                    return path.join("/");
                  }
                  
                  // Find leaf nodes (those not being a parent of any other)
                  var parentSet = {};
                  for (var i = 0; i < processes.length; i++) {
                    parentSet[processes[i].ppid] = true;
                  }
                  
                  var out = [];
                  for (var i = 0; i < processes.length; i++) {
                    var pid = processes[i].pid;
                    if (!parentSet[pid]) {
                      out.push(buildPath(pid));
                    }
                  }
                  
                  
                  return out.join("\n");
                  
                  
          master_item:
            key: 'proc.get[,,,process]'
          tags:
            - tag: ppid
        - uuid: 0cb4520bbae54ab4a2ae48acad9a9878
          name: 'process path translated'
          type: DEPENDENT
          key: process.path.translated
          delay: '0'
          value_type: LOG
          trends: '0'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  delay = {$SCH:delay};
                  //delay = 300;
                  
                  var lld = [];
                  var lines = JSON.parse(value);
                  for (i = 0; i < lines.length; i++) {
                    var row = {};
                    row["pid"] = lines[i].pid;
                    row["ppid"] = lines[i].ppid;
                    row["name"] = lines[i].name;
                  
                    row["cmdline"] = lines[i].cmdline.match(/pidfile....(.*)...exit.dir/) ? 'pod ' +
                      lines[i].cmdline.match(/pidfile....(.*)...exit.dir/)[1] :
                      lines[i].cmdline.replace(/ \[[^\]]+\]$/, '').replace(/^.*\//gm, '').replace(/[^a-zA-Z0-9\. ]/g, '');
                  
                  // special formating rule
                   if (lines[i].cmdline.match(/pidfile....(.*)...exit.dir/)) {
                      row["host"] = 'pod ' + lines[i].cmdline.replace(/\s+$/, '').match(/pidfile....(.*)...exit.dir/)[1];
                  }
                  else if (lines[i].cmdline.match(/postgres: \S+ \S+ [0-9.]+/)) {
                    row["host"] = lines[i].cmdline.replace(/\s+$/, '').match(/(postgres: \S+ \S+ [0-9.]+)/)[1].replace(/[^a-zA-Z0-9\. ]/g, '');
                  }
                  else if (lines[i].cmdline.match(/moby..id ([a-f0-9]{64})..address/)) {
                    row["host"] = lines[i].cmdline.match(/moby..id ([a-f0-9]{64})..address/)[1];
                    if (row["host"] === '88196354b55d3ecf124ef5473b853cba51132d0cebc2d1649be1bc9d0e7c2179') row["host"] = 'z70prx.riga';
                    if (row["host"] === 'c28b8221161141ae41ff0a23352717193d8099c91d2c3b98a97fe2600aaf3f2d') row["host"] = 'z70prx.riga.cloud';
                    if (row["host"] === 'cc027a87e89021eec9bb8f84b835a9cef3b77cf97465a8b672d45fe72cdd7a19') row["host"] = 'ps3netsrv';
                  }
                  else if (lines[i].cmdline.match(/(host.port \S+ .container.ip \S+)/)) {
                    row["host"] = lines[i].cmdline.match(/(host.port \S+ .container.ip \S+)/)[1].replace(/ .container/g, ' container');
                    
                  }
                  else {
                      row["host"] = lines[i].cmdline.replace(/\s+$/, '').replace(/ \[[^\]]+\]$/, '').replace(/^.*\//gm, '').replace(/[^a-zA-Z0-9\. ]/g, '');
                  }
                  
                    lld.push(row);
                  }
                  
                  var processes = lld;
                  
                  // Create a mapping from pid to process
                  var pidMap = {};
                  for (var i = 0; i < processes.length; i++) {
                    pidMap[processes[i].pid] = processes[i];
                  }
                  
                  // Function to build full path from root to a given pid
                  function buildPath(pid) {
                    var path = [];
                    while (pidMap[pid]) {
                      path.unshift(pid);
                      pid = pidMap[pid].ppid;
                    }
                    path.unshift(pid); // Add the root (e.g., 1)
                    return path.join("/");
                  }
                  
                  // Find leaf nodes (those not being a parent of any other)
                  var parentSet = {};
                  for (var i = 0; i < processes.length; i++) {
                    parentSet[processes[i].ppid] = true;
                  }
                  
                  var out = [];
                  for (var i = 0; i < processes.length; i++) {
                    var pid = processes[i].pid;
                    if (!parentSet[pid]) {
                      out.push(buildPath(pid));
                    }
                  }
                  
                  var input = [];
                  for (var i = 0; i < out.length; i++) {
                    //Zabbix.Log(3,out[i])
                    if (out[i].match(/^1\//)) {  input.push(out[i].match(/^1\/(.*)/)[1]); }
                  }
                  
                  // return input;
                  
                  processPidRel = [];
                  
                  for (var i = 0; i < input.length; i++) {
                  
                    // split line into PIDs
                    var translated = '';
                  
                    //Zabbix.Log(3,"input: "+input[i])
                    var fullPath = input[i].split("\/");
                  
                    //Zabbix.Log(3,"full: "+fullPath.join("\n"));
                  
                    for (var f = 0; f < fullPath.length; f++) {
                  
                      // locate process binary name based on pid
                      for (var n = 0; n < lld.length; n++) {
                  
                        // if process ID match
                        if (parseInt(fullPath[f]) === parseInt(lld[n].pid)) {
                  
                          if ( 
                            lld[n].host.match(/^systemd/) || 
                            lld[n].host.match(/^dbusbrokerlaunch/) || 
                            lld[n].host.match(/^dbusbroker/) ||
                            lld[n].host.match(/^sshd/) ||
                            lld[n].host.match(/^volumes/)
                          
                          ) {
                            addToString = lld[n].host.match(/^(\S+)/)[1];
                          } else {
                            addToString = lld[n].host;
                          }
                  
                          if (translated === '') {
                            translated = translated + addToString;
                          } else {
                            translated = translated + '/' + addToString;
                          }
                          //Zabbix.Log(3,"translated: "+translated)
                          lastPid = lld[n].pid;
                  
                        }
                  
                      }
                  
                  
                  
                    }
                  
                    processPidRel.push({'host':translated
                    .replace(/\//gm,' ')
                    .replace(/zabbixserver.*zabbixserver/gm,'zabbixserver')
                    .replace(/zabbixproxy.*zabbixproxy/gm,'zabbixproxy')
                    .replace(/zabbixagentd.*zabbixagentd/gm,'zabbixagentd')
                    .replace(/zabbixagent2.*zabbixagent2/gm,'zabbixagent2')
                    .replace(/zabbixjavagateway.*JavaGateway/gm,'ZabbixJavaGateway')
                    .replace(/sshd.*oCASignatureAlgorithmsecdsasha2nistp256ecdsasha2nistp384ecdsasha2nistp521sshed25519rsasha2256rsasha2512sshrsa/gm,'sshd')
                    .replace(/postgres.*postgres/gm,'postgres')
                    ,'path':translated.replace(/^\//,''),'pid':lastPid,'server':'{$HOST.HOST}'});
                  
                  }
                  
                  
                  
                  // generate all possible timestamps
                  function generateSchedule(batchDelay, offset) {
                      // the perfect second
                      var perfectSecond = offset % 60;
                      // jump
                      var jump = Math.floor(batchDelay / 60);
                      // first minute to kick in
                      var firstkick = Math.floor(offset / 60);
                      var times = [];
                      for (var m = firstkick; m < 60; m += jump) { times.push(m); }
                      return "m" + times.join(',') + "s" + perfectSecond;
                  }
                  var all = [];
                  for (var n = 0; n < delay; n++) { all.push(generateSchedule(delay, n)); }
                  
                  // inject timestamp
                  var outcome = [];
                    for (var n = 0; n < processPidRel.length; n++) {
                  var row = processPidRel[n];
                  row["itstime"] = all[ n % delay ];
                  outcome.push(row);
                  }
                  
                  
                  return JSON.stringify(outcome);
                  
                  
            - type: JAVASCRIPT
              parameters:
                - |
                  // avoid duplicate process names by adding number
                  var data = JSON.parse(value);
                  
                  // Step 1: Count occurrences of each host
                  var hostOccurrences = {};
                  for (var i = 0; i < data.length; i++) {
                      var host = data[i].host;
                      if (hostOccurrences[host] === undefined) {
                          hostOccurrences[host] = 1;
                      } else {
                          hostOccurrences[host]++;
                      }
                  }
                  
                  // Step 2: Modify host names only if duplicates exist
                  var hostCount = {};  // Dictionary to track occurrences
                  for (var i = 0; i < data.length; i++) {
                      var host = data[i].host;
                  
                      if (hostOccurrences[host] > 1) {
                          // If first occurrence, add "1"
                          if (hostCount[host] === undefined) {
                              hostCount[host] = 1;
                              data[i].host = host + " 1";
                          } else {
                              hostCount[host]++;
                              data[i].host = host + " " + hostCount[host];
                          }
                      }
                  }
                  
                  // Print output (Duktape doesn't have console.log, use print)
                  return JSON.stringify(data, null, 2);
                  
          master_item:
            key: 'proc.get[,,,process]'
          tags:
            - tag: ppid
      discovery_rules:
        - uuid: 9fcdf4e126314dd3a6d8e7d922c33c81
          name: pid
          type: DEPENDENT
          key: pid
          delay: '0'
          lifetime: 1h
          host_prototypes:
            - uuid: 522909d1d40e437ea9bc1d2500ba604e
              host: '{#SERVER} {#HOST}'
              name: '{#SERVER} {#HOST}'
              inventory_mode: AUTOMATIC
              group_links:
                - group:
                    name: PrID
              group_prototypes:
                - name: 'PIDs/{#SERVER}'
              templates:
                - name: 'proc pid mon individual'
              macros:
                - macro: '{$ITS.TIME}'
                  value: '{#ITS.TIME}'
                - macro: '{$PATH}'
                  value: '{#PATH}'
                - macro: '{$PID}'
                  value: '{#PID}'
              tags:
                - tag: pid
          master_item:
            key: process.path.translated
          lld_macro_paths:
            - lld_macro: '{#HOST}'
              path: '$.[''host'']'
            - lld_macro: '{#ITS.TIME}'
              path: '$.[''itstime'']'
            - lld_macro: '{#PATH}'
              path: '$.[''path'']'
            - lld_macro: '{#PID}'
              path: '$.[''pid'']'
            - lld_macro: '{#SERVER}'
              path: '$.[''server'']'
      macros:
        - macro: '{$COMM:ignore}'
          value: (auditd|dhclient|dbus-daemon|lsmd|rpcbind|polkitd|systemd-journald|systemd-logind|systemd-udevd|agent|updater|sssd_nss|NetworkManager|atd|chronyd|crond|dtprobed|dtprobed|gssproxy|irqbalance|iscsid|rsyslogd|sedispatch|smartd|sshd|sssd|run-parts|sssd_be|agetty|droplet-agent|dbus-broker-launch|tuned|aardvark-dns|.sd-pam.|bash|tmux|screen|slirp4netns|dbus-broker|catatonit|sssd_kcm)
    - uuid: e8cbfbb36854405a8f3d254cbe605447
      template: 'proc pid mon individual'
      name: 'proc pid mon individual'
      templates:
        - name: 'unsupported items'
      groups:
        - name: Templates/Modules
      items:
        - uuid: 7929935e6f2f4362b4b8cb7df9453652
          name: 'pid cancelled_write_bytes'
          type: DEPENDENT
          key: cancelled_write_bytes
          delay: '0'
          units: B
          preprocessing:
            - type: REGEX
              parameters:
                - 'cancelled_write_bytes: (\d+)'
                - \1
            - type: SIMPLE_CHANGE
              parameters:
                - ''
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/io]'
        - uuid: 19ab8d58f4cb415aacd1280802dc6afd
          name: 'pid nonvoluntary ctxt switches'
          type: DEPENDENT
          key: nonvoluntary.ctxt.switches
          delay: '0'
          preprocessing:
            - type: REGEX
              parameters:
                - 'nonvoluntary_ctxt_switches:\s+(\d+)'
                - \1
            - type: SIMPLE_CHANGE
              parameters:
                - ''
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/status]'
        - uuid: 8710d1d31cde473aa8b946021a1b38bc
          name: 'pid rchar'
          type: DEPENDENT
          key: rchar
          delay: '0'
          preprocessing:
            - type: REGEX
              parameters:
                - 'rchar: (\d+)'
                - \1
            - type: SIMPLE_CHANGE
              parameters:
                - ''
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/io]'
        - uuid: 9c282bdbffa84ee1aea08cdb8cc5ad75
          name: 'pid read bytes'
          type: DEPENDENT
          key: read_bytes
          delay: '0'
          units: B
          preprocessing:
            - type: REGEX
              parameters:
                - 'read_bytes: (\d+)'
                - \1
            - type: SIMPLE_CHANGE
              parameters:
                - ''
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/io]'
        - uuid: a591a639e25542f4975ccd77365940bb
          name: 'pid rss anon'
          type: DEPENDENT
          key: RssAnon
          delay: '0'
          units: B
          preprocessing:
            - type: REGEX
              parameters:
                - 'RssAnon:\s+(\d+)'
                - \1
            - type: MULTIPLIER
              parameters:
                - '1024'
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/status]'
        - uuid: 6c84aee327cc411c869580ab7c6e7db1
          name: 'pid rss file'
          type: DEPENDENT
          key: RssFile
          delay: '0'
          units: B
          preprocessing:
            - type: REGEX
              parameters:
                - 'RssFile:\s+(\d+)'
                - \1
            - type: MULTIPLIER
              parameters:
                - '1024'
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/status]'
        - uuid: c1405fe3dc6d4d8590bcf1629dbf521a
          name: 'pid rss shmem'
          type: DEPENDENT
          key: RssShmem
          delay: '0'
          units: B
          preprocessing:
            - type: REGEX
              parameters:
                - 'RssShmem:\s+(\d+)'
                - \1
            - type: MULTIPLIER
              parameters:
                - '1024'
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/status]'
        - uuid: 698a00a7db6746a6aa893276b0297b46
          name: 'pid system time'
          type: DEPENDENT
          key: stime
          delay: '0'
          preprocessing:
            - type: REGEX
              parameters:
                - \S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(\S+)
                - \1
            - type: SIMPLE_CHANGE
              parameters:
                - ''
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/stat]'
        - uuid: e0eeb757b95f45e38b341dbd9fb3ce22
          name: 'pid syscr'
          type: DEPENDENT
          key: syscr
          delay: '0'
          preprocessing:
            - type: REGEX
              parameters:
                - 'syscr: (\d+)'
                - \1
            - type: SIMPLE_CHANGE
              parameters:
                - ''
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/io]'
        - uuid: 6cf035edb75e4a7986c51b8781b60f7d
          name: 'pid syscw'
          type: DEPENDENT
          key: syscw
          delay: '0'
          preprocessing:
            - type: REGEX
              parameters:
                - 'syscw: (\d+)'
                - \1
            - type: SIMPLE_CHANGE
              parameters:
                - ''
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/io]'
        - uuid: a7780afafd4e479694f8923cad46842c
          name: 'pid threads'
          type: DEPENDENT
          key: threads
          delay: '0'
          preprocessing:
            - type: REGEX
              parameters:
                - 'Threads:\s+(\d+)'
                - \1
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/status]'
        - uuid: b72d683723d246678828ac514953d880
          name: 'pid user and system time'
          type: DEPENDENT
          key: user.system.time
          delay: '0'
          preprocessing:
            - type: REGEX
              parameters:
                - \S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(\S+)\s+(\S+)
                - '\1 \2'
            - type: JAVASCRIPT
              parameters:
                - 'return parseInt(value.match(/^[0-9]+/)[0]) + parseInt(value.match(/[0-9]+$/)[0]);'
            - type: SIMPLE_CHANGE
              parameters:
                - ''
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/stat]'
        - uuid: 2e849e8618db4f939c463f5cccab061e
          name: 'pid user time'
          type: DEPENDENT
          key: utime
          delay: '0'
          preprocessing:
            - type: REGEX
              parameters:
                - \S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(\S+)
                - \1
            - type: SIMPLE_CHANGE
              parameters:
                - ''
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/stat]'
        - uuid: b893545960af4fbbb9d5b1e5d089f4e6
          name: 'proc pid io'
          key: 'vfs.file.contents[/proc/{$PID}/io]'
          delay: '{$UPD};{$ITS.TIME}'
          history: '0'
          value_type: LOG
          trends: '0'
          timeout: 1s
        - uuid: 732ae64ed780446f988b009795266e31
          name: 'proc pid status'
          key: 'vfs.file.contents[/proc/{$PID}/status]'
          delay: '{$UPD};{$ITS.TIME}'
          history: '0'
          value_type: LOG
          trends: '0'
          timeout: 1s
          tags:
            - tag: raw
        - uuid: e4df4c2538314abd8f82917301c7ccaa
          name: 'proc pid stat'
          key: 'vfs.file.contents[/proc/{$PID}/stat]'
          delay: '{$UPD};{$ITS.TIME}'
          history: '0'
          value_type: LOG
          trends: '0'
          timeout: 1s
        - uuid: b45ded4febb1401687ca61e11f6de13a
          name: children
          key: 'vfs.file.contents[/proc/{$PID}/task/{$PID}/children]'
          delay: '{$UPD};{$ITS.TIME}'
          value_type: LOG
          trends: '0'
          timeout: 1s
        - uuid: 10a14e06f90041d8b37e9e76574ff93f
          name: 'pid vm data'
          type: DEPENDENT
          key: VmData
          delay: '0'
          units: B
          preprocessing:
            - type: REGEX
              parameters:
                - 'VmData:\s+(\d+)'
                - \1
            - type: MULTIPLIER
              parameters:
                - '1024'
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/status]'
        - uuid: 9fe4244f70bd403a91df14789e64e4b5
          name: 'pid vm swap'
          type: DEPENDENT
          key: VmSwap
          delay: '0'
          units: B
          preprocessing:
            - type: REGEX
              parameters:
                - 'VmSwap:\s+(\d+)'
                - \1
            - type: MULTIPLIER
              parameters:
                - '1024'
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/status]'
        - uuid: 32e8dbf5ebf447bda43a7d417892b9a1
          name: 'pid voluntary ctxt switches'
          type: DEPENDENT
          key: voluntary.ctxt.switches
          delay: '0'
          preprocessing:
            - type: REGEX
              parameters:
                - 'voluntary_ctxt_switches:\s+(\d+)'
                - \1
            - type: SIMPLE_CHANGE
              parameters:
                - ''
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/status]'
        - uuid: 0007822b325d48b499e204d91199bfca
          name: 'pid wchar'
          type: DEPENDENT
          key: wchar
          delay: '0'
          units: '!char'
          preprocessing:
            - type: REGEX
              parameters:
                - 'wchar: (\d+)'
                - \1
            - type: SIMPLE_CHANGE
              parameters:
                - ''
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/io]'
        - uuid: 0dd90e02d9e4480796a7de40236d6660
          name: 'pid write bytes'
          type: DEPENDENT
          key: write_bytes
          delay: '0'
          units: B
          preprocessing:
            - type: REGEX
              parameters:
                - 'write_bytes: (\d+)'
                - \1
            - type: SIMPLE_CHANGE
              parameters:
                - ''
          master_item:
            key: 'vfs.file.contents[/proc/{$PID}/io]'
      macros:
        - macro: '{$UPD}'
          value: '0'
      dashboards:
        - uuid: ad3c41ed2f3244e2b41514c64f056029
          name: pid
          pages:
            - widgets:
                - type: svggraph
                  name: CPU
                  width: '24'
                  height: '4'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: 43A047
                    - type: INTEGER
                      name: ds.0.fill
                      value: '2'
                    - type: STRING
                      name: ds.0.items.0
                      value: 'pid system time*'
                    - type: INTEGER
                      name: ds.0.stacked
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '0'
                    - type: STRING
                      name: ds.1.color
                      value: FFD54F
                    - type: INTEGER
                      name: ds.1.fill
                      value: '0'
                    - type: STRING
                      name: ds.1.items.0
                      value: 'pid user time*'
                    - type: INTEGER
                      name: ds.1.transparency
                      value: '0'
                    - type: INTEGER
                      name: ds.1.width
                      value: '4'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: or.0.color
                      value: 0080FF
                    - type: STRING
                      name: or.0.items.0
                      value: user_usec
                    - type: STRING
                      name: reference
                      value: UDITR
                    - type: INTEGER
                      name: righty
                      value: '0'
                - type: svggraph
                  name: Disk
                  x: '24'
                  width: '24'
                  height: '4'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: FF465C
                    - type: INTEGER
                      name: ds.0.fill
                      value: '1'
                    - type: STRING
                      name: ds.0.items.0
                      value: 'pid write bytes*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '0'
                    - type: STRING
                      name: ds.1.color
                      value: FFD54F
                    - type: INTEGER
                      name: ds.1.fill
                      value: '1'
                    - type: STRING
                      name: ds.1.items.0
                      value: 'pid read bytes*'
                    - type: INTEGER
                      name: ds.1.transparency
                      value: '0'
                    - type: INTEGER
                      name: ds.1.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: WZUKX
                    - type: INTEGER
                      name: righty
                      value: '0'
                - type: svggraph
                  name: Memory
                  x: '48'
                  width: '24'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: FF465C
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: 'pid rss anon*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '0'
                    - type: STRING
                      name: ds.1.color
                      value: FFD54F
                    - type: INTEGER
                      name: ds.1.fill
                      value: '0'
                    - type: STRING
                      name: ds.1.items.0
                      value: 'pid rss file*'
                    - type: INTEGER
                      name: ds.1.transparency
                      value: '0'
                    - type: STRING
                      name: ds.2.color
                      value: 0EC9AC
                    - type: INTEGER
                      name: ds.2.fill
                      value: '0'
                    - type: STRING
                      name: ds.2.items.0
                      value: 'pid rss shmem*'
                    - type: INTEGER
                      name: ds.2.transparency
                      value: '0'
                    - type: STRING
                      name: ds.3.color
                      value: 524BBC
                    - type: INTEGER
                      name: ds.3.fill
                      value: '0'
                    - type: STRING
                      name: ds.3.items.0
                      value: 'pid vm data*'
                    - type: INTEGER
                      name: ds.3.transparency
                      value: '0'
                    - type: STRING
                      name: ds.4.color
                      value: BF00FF
                    - type: INTEGER
                      name: ds.4.fill
                      value: '0'
                    - type: STRING
                      name: ds.4.items.0
                      value: 'pid vm swap*'
                    - type: INTEGER
                      name: ds.4.transparency
                      value: '0'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: WWMJS
                    - type: INTEGER
                      name: righty
                      value: '0'
