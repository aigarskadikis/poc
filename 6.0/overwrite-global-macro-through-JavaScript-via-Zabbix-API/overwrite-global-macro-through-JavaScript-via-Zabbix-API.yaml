zabbix_export:
  version: '6.0'
  date: '2024-12-28T16:43:04Z'
  groups:
    - uuid: 57b7ae836ca64446ba2c296389c009b7
      name: Templates/Modules
  templates:
    - uuid: 5faa5dca60794f27a78538ac38e58b68
      template: 'overwrite global macro through JavaScript via Zabbix API'
      name: 'overwrite global macro through JavaScript via Zabbix API'
      groups:
        - name: Templates/Modules
      items:
        - uuid: 9f6d98199fa04ccd85ea378a54a77f15
          name: 'Create or update global macro'
          type: SCRIPT
          key: create.or.update.global.macro
          delay: 1d
          trends: '0'
          value_type: LOG
          params: |
            // load all variables into memory
            var params = JSON.parse(value),
                now = new Date();
            
            // function to always print secons, minutes, hours as 2 digits, even it its a 1 digit character
            function padLeft(value, length, char) {
                value = String(value);
                while (value.length < length) {
                    value = char + value;
                }
                return value;
            }
            
            // define macros to check/create without '{$' an '}'
            var macrosToCheck = [
                'DATE:arg1.year',
                'DATE:arg2.month',
                'DATE:arg3.day',
                'DATE:arg4.hour',
                'DATE:arg5.minute',
                'DATE:arg6.seconds'
            ];
            
            // prepare values for replacement. order is important
            var valuesToInsert = [
                now.getFullYear(),
                padLeft(now.getMonth() + 1, 2, '0'),
                padLeft(now.getDate(), 2, '0'),
                padLeft(now.getHours(), 2, '0'),
                padLeft(now.getMinutes(), 2, '0'),
                padLeft(now.getSeconds(), 2, '0')
            ];
            
            var request = new HttpRequest();
            request.addHeader('Content-Type: application/json');
            
            var allGlobalMacrosBefore = JSON.parse(request.post(params.url,
                '{"jsonrpc":"2.0","method":"usermacro.get","params":{"output":["globalmacroid","macro","value"],"globalmacro":true},"auth":"' + params.token + '","id":1}'
            )).result;
            
            // prepare much compact array which holds only necessary values
            var target = [];
            for (var a = 0; a < allGlobalMacrosBefore.length; a++) {
                for (var b = 0; b < macrosToCheck.length; b++) {
                    Zabbix.Log(4, 'macro update compare: ' + allGlobalMacrosBefore[a].macro + ' with ' + '{$' + macrosToCheck[b] + '}');
                    if (allGlobalMacrosBefore[a].macro === '{$' + macrosToCheck[b] + '}') {
                        Zabbix.Log(4, 'macro update: ' + allGlobalMacrosBefore[a].macro + ' === ' + '{$' + macrosToCheck[b] + '}');
                        target.push(allGlobalMacrosBefore[a]);
                    }
                }
            }
            
            // check if the amount of macros to maintain match existing macro. this portion will execute if run template for the first time
            var macroExists = 0;
            var allCreateOperation = [];
            if (macrosToCheck.length !== target.length) {
                // something is missing, need to find what. open every macro which is known by Zabbix
                for (var b = 0; b < macrosToCheck.length; b++) {
                    // reset the counter, so far macro has not been found
                    macroExists = 0;
                    for (var a = 0; a < target.length; a++) {
                        Zabbix.Log(3, 'look for missing macro update: ' + target[a].macro + ' VS {$' + macrosToCheck[b] + '}');
                        if (target[a].macro === '{$' + macrosToCheck[b] + '}') {
                            macroExists = 1;
                            break;
                        }
                    }
            
                    // if the list was completed and macro was not found then create a new
                    if (macroExists !== 1) {
                        var createNew = JSON.parse(request.post(params.url,
                            '{"jsonrpc":"2.0","method":"usermacro.createglobal","params":{"macro":"' + '{$' + macrosToCheck[b] + '}' + '","value":"' + valuesToInsert[b] + '"},"auth":"' + params.token + '","id":1}'
                        ));
                        allCreateOperation.push(createNew);
                    }
                }
            }
            
            // prepare payload what needs to be updated
            var dataForUpdate = [];
            for (var m = 0; m < target.length; m++) {
                // iterate through importand macro names
                for (var n = 0; n < macrosToCheck.length; n++) {
                    // compare the macro name
                    if (target[m].macro === '{$' + macrosToCheck[n] + '}') {
                        // if value is not correct at the moment
                        Zabbix.Log(4, 'about to macro update: ' + target[m].value + ' VS ' + valuesToInsert[n]);
                        if (Number(target[m].value) !== Number(valuesToInsert[n])) {
                            var row = {}
                            row["globalmacroid"] = target[m].globalmacroid;
                            row["value"] = valuesToInsert[n];
                            dataForUpdate.push(row);
                        }
                    }
                }
            }
            
            
            var allUpdateOperations = JSON.parse(request.post(params.url,
                '{"jsonrpc":"2.0","method":"usermacro.updateglobal","params":'+ JSON.stringify(dataForUpdate) +',"auth":"' + params.token + '","id":1}'
            ));
            
            //    'target': target,
            
            // output
            return JSON.stringify({
                'dataForUpdate':dataForUpdate,
                'allCreateOperation': allCreateOperation,
                'allUpdateOperations': allUpdateOperations
            })
          parameters:
            - name: 1_year
              value: '{$DATE:arg1.year}'
            - name: 2_month
              value: '{$DATE:arg2.month}'
            - name: 3_day
              value: '{$DATE:arg3.day}'
            - name: 4_hour
              value: '{$DATE:arg4.hour}'
            - name: 5_minute
              value: '{$DATE:arg5.minute}'
            - name: 6_second
              value: '{$DATE:arg6.seconds}'
            - name: token
              value: '{$Z_API_SESSIONID}'
            - name: url
              value: '{$ZABBIX.URL}/api_jsonrpc.php'
