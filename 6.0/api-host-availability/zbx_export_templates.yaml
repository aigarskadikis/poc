zabbix_export:
  version: '6.0'
  date: '2024-04-22T06:58:53Z'
  groups:
    - uuid: 57b7ae836ca64446ba2c296389c009b7
      name: Templates/Modules
  templates:
    - uuid: 06f5beff8644415e878816d05aec7309
      template: 'Host availability widget Zabbix APi'
      name: 'Host availability widget Zabbix APi'
      groups:
        - name: Templates/Modules
      items:
        - uuid: 913394d2d112459fb120bc8b7b8019ad
          name: hostinterface.get
          type: HTTP_AGENT
          key: hostinterface.get
          delay: 0;md1h9
          trends: '0'
          value_type: TEXT
          description: 'an API call which gets all items'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.result
            - type: JSONPATH
              parameters:
                - '$..[?(@.[''main''] == "1" && @.[''available''] == "2")]'
              error_handler: CUSTOM_VALUE
              error_handler_params: '[]'
            - type: JAVASCRIPT
              parameters:
                - |
                  // interface + host + proxy
                  
                  var interfaceList = JSON.parse(value);
                  
                  var req = new HttpRequest();
                  
                  // where Zabbix API endpoint is located
                  var json_rpc = '{$ZABBIX.URL}/api_jsonrpc.php';
                  
                  // this will be JSON call
                  req.addHeader('Content-Type: application/json');
                  
                  // get host list
                  var hostList = JSON.parse(req.post(json_rpc,
                      '{"jsonrpc":"2.0","method":"host.get","params":{"output":["host","name","hostid","status","proxy_hostid"]},"auth":"{$Z_API_SESSIONID}","id": 1}'
                  )).result;
                  
                  // get host list
                  var proxyList = JSON.parse(req.post(json_rpc,
                      '{"jsonrpc":"2.0","method":"proxy.get","params":{"output":["host","proxyid"]},"auth":"{$Z_API_SESSIONID}","id": 1}'
                  )).result;
                  
                  
                  // output will be an array
                  var allTogether = [];
                  
                  // take one full itemid containing all characteristics like key_, units, name
                  for (i in interfaceList) {
                  
                      var row = {};
                      row = interfaceList[i];
                  
                      // iterate through host array to find the matching host title
                      for (h in hostList) {
                  
                          // check if there is a match between the hostid which belongs at item level and the host array
                          if (interfaceList[i].hostid === hostList[h].hostid) {
                  
                              row["hostStatus"] = hostList[h].status;
                              row["name"] = hostList[h].name;
                              row["proxy_hostid"] = hostList[h].proxy_hostid;
                  
                              break;
                          }
                  
                      }
                  
                  
                      // map the host list with proxy (if there is even a proxy)
                      for (p in proxyList) {
                  
                          // check if this host belongs to proxy
                          if (row["proxy_hostid"] > 0) {
                  
                              // iterate through list and try to map with existing proxy name
                              if (row["proxy_hostid"] === proxyList[p].proxyid) {
                  
                                  row["proxy"] = proxyList[p].host;
                  
                                  break;
                              }
                          } else {
                              row["proxy"] = '';
                          }
                  
                  
                  
                      }
                  
                  
                      allTogether.push(row);
                  
                  }
                  
                  return JSON.stringify(allTogether);
            - type: JSONPATH
              parameters:
                - '$..[?(@.[''hostStatus''] == "0")]'
            - type: JAVASCRIPT
              parameters:
                - |
                  // useip => chose IP or DNS
                  var input = JSON.parse(value);
                  
                  // output will be an array
                  var output = [];
                  
                  for (e in input) {
                  
                      // create new row
                      var row = {};
                  
                      // transfer all columns from existing element
                      row = input[e];
                  
                      // validate if passive checks are connected to IP address or DNS entry
                      if (input[e].useip === '1') {
                          row["IP or DNS"] = input[e].ip;
                      } else {
                          row["IP or DNS"] = input[e].dns;
                      }
                  
                      // create new field "interface" and translate to human readable interface name
                      if (input[e].type === '1') { row["interface"] = 'ZBX' } 
                      if (input[e].type === '2') { row["interface"] = 'SNMP' } 
                      if (input[e].type === '3') { row["interface"] = 'IPMI' } 
                      if (input[e].type === '4') { row["interface"] = 'JMX' }
                  
                      row["host conf"] = '<a href=\'{$ZABBIX.URL}/zabbix.php?action=host.edit&hostid='+input[e].hostid+'\'>'+input[e].name+'</a>';
                  
                      // add the existing content + new field "connect"
                      output.push(row);
                  
                  }
                  
                  return JSON.stringify(output);
            - type: JAVASCRIPT
              parameters:
                - |
                  // delete fields
                  var array = JSON.parse(value);
                  
                  for (i=0; i<array.length; i++) {
                      delete array[i].available;
                      delete array[i].interfaceid;
                      delete array[i].main;
                      delete array[i].errors_from;
                      delete array[i].disable_until;
                      delete array[i].hostStatus;
                      delete array[i].ip;
                      delete array[i].useip;
                      delete array[i].dns;
                      delete array[i].type;
                      delete array[i].name;
                      delete array[i].hostid;
                      delete array[i].proxy_hostid;
                  }
                  
                  return JSON.stringify(array);
            - type: JSONPATH
              parameters:
                - '$.[0:{$RECORDS}]'
          timeout: 9s
          url: '{$ZABBIX.URL}/api_jsonrpc.php'
          posts: |
            {
                "jsonrpc": "2.0",
                "method": "hostinterface.get",
                "params": {
                    "output": ["errors_from","disable_until","dns","main","error","available","useip","hostid","type","port","ip"]
                },
                "auth": "{$Z_API_SESSIONID}",
                "id": 1
            }
          status_codes: ''
          post_type: JSON
          request_method: POST
          tags:
            - tag: Application
              value: api
        - uuid: 233c46daa45149e58fe3bb1d3221dae4
          name: HTML
          type: DEPENDENT
          key: HtmlGroupedByColumn
          delay: '0'
          trends: '0'
          value_type: TEXT
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  
                  var json_array = JSON.parse(value);
                  
                  function getValues(obj) {
                      var result = [];
                  
                      for (i in obj) {
                          result.push(obj[i]);
                      }
                  
                      return result;
                  }
                  
                  function getHtmlGroupedByColumn(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table style=\'background:#97aab3;border:2px gray solid\'>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(getValues(row));
                      }
                  
                      html += '<tr><th style=\'border:1px white solid\'>' + (getValues(header).join('</th><th style=\'border:1px white solid\'>')) + '</th>';
                      for (i in rows) {
                          html += '<tr><td style=\'border:1px white solid\'>' + (rows[i].join('</td><td style=\'border:1px white solid\'>')) + '</td>';
                      }
                      html += '</table>';
                  
                      return html;
                  }
                  
                  function getHtmlGroupedByRow(data) {
                      var header = [];
                      var rows = [];
                      var html = '<table>';
                  
                      for (i in data) {
                          var row = [];
                  
                          for (k in data[i]) {
                              header[k] = k;
                              row[k] = data[i][k];
                          }
                  
                          rows.push(row);
                      }
                  
                      html += '<tr><td></td>';
                      var header_array = getValues(header);
                      for (i = 0; i < header_array.length; i++) {
                          html += '<th>' + (i + 1) + '</th>';
                      }
                      html += '</tr>';
                  
                      for (i in header) {
                          html += '<tr><th>' + i + '</th>';
                          for (j in rows) {
                              html += '<td>' + rows[j][i] + '</td>';
                          }
                          html += '</tr>';
                      }
                  
                      html += '</table>';
                  
                      return html;
                  }
                  
                  return getHtmlGroupedByColumn(json_array);
          master_item:
            key: hostinterface.get
      macros:
        - macro: '{$RECORDS}'
          value: '10'
      dashboards:
        - uuid: c100b83607c344b888273653b13e8da4
          name: 'Unavailable hosts'
          display_period: '3600'
          pages:
            - widgets:
                - type: PLAIN_TEXT
                  name: HTML
                  width: '24'
                  height: '8'
                  fields:
                    - type: ITEM
                      name: itemids
                      value:
                        host: 'Host availability widget Zabbix APi'
                        key: HtmlGroupedByColumn
                    - type: INTEGER
                      name: show_as_html
                      value: '1'
                    - type: INTEGER
                      name: show_lines
                      value: '1'
                    - type: INTEGER
                      name: style
                      value: '1'
