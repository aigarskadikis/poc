<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2022-02-03T00:13:51Z</date>
    <groups>
        <group>
            <name>Templates/Applications</name>
        </group>
    </groups>
    <templates>
        <template>
            <template>Zabbix processes memory usage</template>
            <name>Zabbix processes memory usage</name>
            <description>Install sudoers rule&#13;
===================&#13;
cd /etc/sudoers.d&#13;
echo 'zabbix ALL=(ALL) NOPASSWD: /usr/local/bin/ps_mem.py' | sudo tee zabbix_ps_mem&#13;
sudo chmod 0440 zabbix_ps_mem&#13;
&#13;
Distribute '/usr/local/bin/ps_mem.py' script to aggregate memory usage&#13;
===================&#13;
echo '' | base64 --decode | sudo tee /usr/local/bin/ps_mem.py &amp;&amp; sudo chmod +x /usr/local/bin/ps_mem.py</description>
            <groups>
                <group>
                    <name>Templates/Applications</name>
                </group>
            </groups>
            <applications>
                <application>
                    <name>Processes of Zabbix</name>
                </application>
                <application>
                    <name>Zabbix raw items</name>
                </application>
            </applications>
            <items>
                <item>
                    <name>List processes</name>
                    <type>ZABBIX_ACTIVE</type>
                    <key>system.run[&quot;{$ZABBIX.PROCESSES}&quot;]</key>
                    <delay>13m</delay>
                    <trends>0</trends>
                    <value_type>TEXT</value_type>
                    <applications>
                        <application>
                            <name>Zabbix raw items</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                            <params>1d</params>
                        </step>
                    </preprocessing>
                </item>
            </items>
            <discovery_rules>
                <discovery_rule>
                    <name>Processes of Zabbix</name>
                    <type>DEPENDENT</type>
                    <key>processes.of.zabbix</key>
                    <delay>0</delay>
                    <item_prototypes>
                        <item_prototype>
                            <name>{#COMPONENT} {#PROCESS}</name>
                            <type>ZABBIX_ACTIVE</type>
                            <key>system.run[&quot;{$PS.MEM.START}{#PROCESS}{$PS.MEM.END}&quot;]</key>
                            <delay>5m</delay>
                            <units>B</units>
                            <applications>
                                <application>
                                    <name>Processes of Zabbix</name>
                                </application>
                            </applications>
                            <application_prototypes>
                                <application_prototype>
                                    <name>{#COMPONENT}</name>
                                </application_prototype>
                            </application_prototypes>
                        </item_prototype>
                    </item_prototypes>
                    <graph_prototypes>
                        <graph_prototype>
                            <name>Memory {#COMPONENT} {#PROCESS}</name>
                            <ymin_type_1>FIXED</ymin_type_1>
                            <graph_items>
                                <graph_item>
                                    <sortorder>1</sortorder>
                                    <color>1A7C11</color>
                                    <item>
                                        <host>Zabbix processes memory usage</host>
                                        <key>system.run[&quot;{$PS.MEM.START}{#PROCESS}{$PS.MEM.END}&quot;]</key>
                                    </item>
                                </graph_item>
                            </graph_items>
                        </graph_prototype>
                    </graph_prototypes>
                    <master_item>
                        <key>system.run[&quot;{$ZABBIX.PROCESSES}&quot;]</key>
                    </master_item>
                    <preprocessing>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>var lld = [];
var lines = value.split(&quot;\n&quot;);
var lines_num = lines.length;
for (i = 0; i &lt; lines_num; i++)
{
  var row = {};
  row[&quot;{#COMPONENT}&quot;] = lines[i].replace(/: .*$/,'');
  row[&quot;{#PROCESS}&quot;] = lines[i].replace(/^.*: /,'');;
  lld.push(row);
}
return JSON.stringify(lld);</params>
                        </step>
                    </preprocessing>
                </discovery_rule>
            </discovery_rules>
            <macros>
                <macro>
                    <macro>{$PS.MEM.END}</macro>
                    <value>&quot;)</value>
                    <description>so we do not need to escape special characters</description>
                </macro>
                <macro>
                    <macro>{$PS.MEM.START}</macro>
                    <value>ps_mem.py --total -p $(pgrep -d, -f &quot;[ ]</value>
                    <description>so we do not need to escape special characters</description>
                </macro>
                <macro>
                    <macro>{$ZABBIX.PROCESSES}</macro>
                    <value>pgrep -a 'zabbix_(server|agentd|agent2|proxy)' | egrep -o --color=none 'zabbix_(server|agentd|agent2|proxy): .*' | sed 's/ [#\[].*//' | sort -u</value>
                    <description>One-liner to list unique processes per component</description>
                </macro>
            </macros>
        </template>
    </templates>
</zabbix_export>
